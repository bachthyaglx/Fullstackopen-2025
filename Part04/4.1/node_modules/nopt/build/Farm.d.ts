doc: { comments: [{ val: 2 }] } }
            , mpath.get('comments.2.comments.1', o, special));

          assert.deepEqual(2, mpath.get('comments.2.comments.1.comments.0.val', o, special));
          done();
        });

        it('handles array.property dot-notation', function(done) {
          assert.deepEqual(
            ['one', '2', '3']
            , mpath.get('comments.name', o, special)
          );
          assert.deepEqual(
            ['one', 2, '3']
            , mpath.get('comments.name', o, special, function(v) {
              return '2' === v ? 2 : v;
            })
          );
          done();
        });

        it('handles array.array notation', function(done) {
          assert.deepEqual(
            [undefined, undefined, [{}, { _doc: { comments: [{ val: 2 }] } }]]
            , mpath.get('comments.comments', o, special)
          );
          done();
        });

        it('handles array.array.index.array', function(done) {
          assert.deepEqual(
            [undefined, undefined, [{ val: