gsConfig> = IfDefaultsTrue<
        T['strict'],
        IfDefaultsFalse<T['allowPositionals'], string[], []>,
        IfDefaultsTrue<T['allowPositionals'], string[], []>
    >;

    type PreciseTokenForOptions<
        K extends string,
        O extends ParseArgsOptionConfig,
    > = O['type'] extends 'string'
        ? {
              kind: 'option';
              index: number;
              name: K;
              rawName: string;
              value: string;
              inlineValue: boolean;
          }
        : O['type'] extends 'boolean'
        ? {
              kind: 'option';
              index: number;
              name: K;
              rawName: string;
              value: undefined;
              inlineValue: undefined;
          }
        : OptionToken & { name: K };

    type TokenForOptions<
        T extends ParseArgsConfig,
        K extends keyof T['options'] = keyof T['options'],
    > = K extends unknown
        ? T['options'] extends ParseArgsOptionsConfig
            ? PreciseTokenForOptions<K & string, T['options'][K]>
            : OptionToken
        : never;

    type ParsedOptionToken<T extends ParseArgsConfig> = IfDefaultsTrue<T['strict'], TokenForOptions<T>, OptionToken>;

    type ParsedPositionalToken<T extends ParseArgsConfig> = IfDefaultsTrue<
        T['strict'],
        IfDefaultsFalse<T['allowPositionals'], { kind: 'positional'; index: number; value: string }, never>,
        IfDefaultsTrue<T['allowPositionals'], { kind: 'positional'; index: number; value: string }, never>
    >;

    type ParsedTokens<T extends ParseArgsConfig> = Array<
        ParsedOptionToken<T> | ParsedPositionalToken<T> | { kind: 'option-terminator'; index: number }
    >;

    type PreciseParsedResults<T extends ParseArgsConfig> = IfDefaultsFalse<
        T['tokens'],
        {
            values: ParsedValues<T>;
            positionals: ParsedPositionals<T>;
            tokens: ParsedTokens<T>;
        },
        {
            values: ParsedValues<T>;
            positionals: ParsedPositionals<T>;
        }
    >;

    type OptionToken =
        | { kind: 'option'; index: number; name: string; rawN