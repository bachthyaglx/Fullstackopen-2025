, e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('arr.0.arr.e', ['a', 'b'], o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: 47 }, e: 'a' }, { a: { c: 48 }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          done();
        });
      });

      describe('array.index.array.path.path', function() {
        it('with single value', function(done) {
          mpath.set('arr.0.arr.a.b', 36, o, function(v) {
            return 36 === v ? 3 : v;
          });
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: 3 }, e: 'a' }, { a: { c: 48, b: 3 }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('arr.0.arr.a.b', 36, o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: 36 }, e: 'a' }, { a: { c: 48, b: 36 }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          done();
        });
        it('with array', function(done) {
          mpath.set('arr.0.arr.a.b', [1, 2, 3, 4], o, function(v) {
            return 2 === v ? 'two' : v;
          });
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: 1 }, e: 'a' }, { a: { c: 48, b: 'two' }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('arr.0.arr.a.b', [1, 2, 3, 4], o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: 1 }, e: 'a' }, { a: { c: 48, b: 2 }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          done();
        });
      });

      describe('array.index.array.$.path.path', function() {
        it('with single value', function(done) {
          mpath.set('arr.0.arr.$.a.b', '$', o, function(v) {
            return '$' === v ? 'dolla billz' : v;
          });
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: 'dolla billz' }, e: 'a' }, { a: { c: 48, b: 'dolla billz' }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('arr.0.arr.$.a.b', '$', o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: '$' }, e: 'a' }, { a: { c: 48, b: '$' }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          done();
        });
        it('with array', function(done) {
          mpath.set('arr.0.arr.$.a.b', [1], o, function(v) {
            return Array.isArray(v) ? {} : v;
          });
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: {} }, e: 'a' }, { a: { c: 48, b: {} }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('arr.0.arr.$.a.b', [1], o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: { b: [1] }, e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          done();
        });
      });

      describe('array.array.index.path', function() {
        it('with single value', function(done) {
          mpath.set('arr.arr.0.a', 'single', o, function(v) {
            return 'single' === v ? 'double' : v;
          });
          assert.deepEqual([
            { yep: [15], arr: [{ a: 'double', e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('arr.arr.0.a', 'single', o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: 'single', e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          done();
        });
        it('with array', function(done) {
          mpath.set('arr.arr.0.a', [4, 8, 15, 16, 23, 42], o, function(v) {
            return 4 === v ? 3 : v;
          });
          assert.deepEqual([
            { yep: [15], arr: [{ a: 3, e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: false }
          ], o.arr);

          mpath.set('arr.arr.0.a', [4, 8, 15, 16, 23, 42], o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: 4, e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: false }
          ], o.arr);

          done();
        });
      });

      describe('array.array.$.index.path', function() {
        it('with single value', function(done) {
          mpath.set('arr.arr.$.0.a', 'singles', o, function(v) {
            return 0;
          });
          assert.deepEqual([
            { yep: [15], arr: [{ a: 0, e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('arr.arr.$.0.a', 'singles', o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: 'singles', e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('$.arr.arr.0.a', 'single', o);
          assert.deepEqual([
            { yep: [15], arr: [{ a: 'single', e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          done();
        });
        it('with array', function(done) {
          mpath.set('arr.arr.$.0.a', [4, 8, 15, 16, 23, 42], o, function(v) {
            return 'nope';
          });
          assert.deepEqual([
            { yep: [15], arr: [{ a: 'nope', e: 'a' }, { a: { c: 48, b: [1] }, e: 'b' }, { d: 'yep', e: 35 }] },
            { yep: 0 }
          ], o.arr);

          mpath.set('arr.arr.$.0.a', [4