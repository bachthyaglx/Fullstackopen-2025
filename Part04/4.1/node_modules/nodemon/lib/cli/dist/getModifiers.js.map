ket : '';

  if (!endBracket) {
    throw new Error(getErrorMessage([!repeatModifier && 'repeat modifier', !releaseSelfModifier && 'release modifier', `"${expectedEndBracket}"`].filter(Boolean).join(' or '), text[pos], text));
  }

  pos += endBracket.length;
  return {
    consumedLength: pos,
    descriptor,
    releasePrevious: !!releasePreviousModifier,
    repeat: repeatModifier ? Math.max(Number(repeatModifier.substr(1)), 1) : 1,
    releaseSelf: hasReleaseSelf(startBracket, descriptor, releaseSelfModifier, repeatModifier)
  };
}

function assertDescriptor(descriptor, text, pos) {
  if (!descriptor) {
    throw new Error(getErrorMessage('key descriptor', text[pos], text));
  }
}

function getEnumValue(f, key) {
  return f[key];
}

function hasReleaseSelf(startBracket, descriptor, releaseSelfModifier, repeatModifier) {
  if (releaseSelfModifier) {
    return releaseSelfModifier === '/';
  }

  if (repeatModifier) {
    return false;
  }

  if (startBracket === '{' && getEnumValue(legacyModifiers, descriptor.toLowerCase())) {
    return false;
  }

  return true;
}

function mapLegacyKey(descriptor) {
  var _getEnumValue;

  return (_getEnumValue = getEnumValue(legacyKeyMap, descrip