          * @since v12.6.0
                 * @return the resource usage for the current process. All of these values come from the `uv_getrusage` call which returns a [`uv_rusage_t` struct][uv_rusage_t].
                 */
                resourceUsage(): ResourceUsage;
                /**
                 * The `process.traceDeprecation` property indicates whether the`--trace-deprecation` flag is set on the current Node.js process. See the
                 * documentation for the `'warning' event` and the `emitWarning() method` for more information about this
                 * flag's behavior.
                 * @since v0.8.0
                 */
                traceDeprecation: boolean;
                /* EventEmitter */
                addListener(event: 'beforeExit', listener: BeforeExitListener): this;
                addListener(event: 'disconnect', listener: DisconnectListener): this;
                addListener(event: 'exit', listener: ExitListener): this;
                addListener(event: 'rejectionHandled', listener: RejectionHandledListener): this;
                addListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this;
                addListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;
                addListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this;
                addListener(event: 'warning', listener: WarningListener): this;
                addListener(event: 'message', listener: MessageListener): this;
                addListener(event: Signals, listener: SignalsListener): this;
                addListener(event: 'multipleResolves', listener: MultipleResolveListener): this;
                addListener(event: 'worker', listener: WorkerListener): this;
                emit(event: 'beforeExit', code: number): boolean;
                emit(event: 'disconnect'): boolean;
                emit(event: 'exit', code: number): boolean;
                emit(event: 'rejectionHandled', promise: Promise<unknown>): boolean;
                emit(event: 'uncaughtException', error: Error): boolean;
                emit(event: 'uncaughtExceptionMonitor', error: Error): boolean;
                emit(event: 'unhandledRejection', reason: unknown, promise: Promise<unknown>): boolean;
                emit(event: 'warning', warning: Error): boolean;
                emit(event: 'message', message: unknown, sendHandle: unknown): this;
                emit(event: Signals, signal?: Signals): boolean;
                emit(event: 'multipleResolves', type: MultipleResolveType, promise: Promise<unknown>, value: unknown): this;
                emit(event: 'worker', listener: WorkerListener): this;
                on(event: 'beforeExit', listener: BeforeExitListener): this;
                on(event: 'disconnect', listener: DisconnectListener): this;
                on(event: 'exit', listener: ExitListener): this;
                on(event: 'rejectionHandled', listener: RejectionHandledListener): this;
                on(event: 'uncaughtException', listener: UncaughtExceptionListener): this;
                on(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this;
          